.data

.const
	s2	4		"LCD = "

.text

	ADDUI	R1, R0, 5
	ADDUI	R2, R0, 5
	ADDUI	R3, R0, 8
	ADDUI	R4, R0, 5
	ADDUI	R5, R0, 5
	ADDUI	R6, R0, 60
	ADDUI	R7, R0, 5
	ADDUI	R8, R0, 5
	ADDUI	R9, R0, 5
	ADDUI	R10, R0, 5
	ADDU	R11, R1, R0 ; copy originals into scratch registers
	ADDU	R12, R2, R0
	ADDU	R13, R3, R0
	ADDU	R14, R4, R0
	ADDU	R15, R5, R0
	ADDU	R16, R6, R0
	ADDU	R17, R7, R0
	ADDU	R18, R8, R0
	ADDU	R19, R9, R0
	ADDU	R20, R10, R0
	ADDUI	R28, R0, 13
	ADDUI	R29, R0, 10
	TR
	TGO
main
NOP
;incr_1
	SLT		R21, R11, R12
	BEQZ	R21, incr_2
	ADDU	R11, R1, R11

	BEQZ	R0,	main

NOP
incr_2
	SLT		R21, R12, R13
	BEQZ	R21, incr_3
	ADDU	R12, R2, R12

	BEQZ	R0,	incr_2

NOP
incr_3
	SLT		R21, R13, R14
	BEQZ	R21, incr_4
	ADDU	R13, R3, R13

	BEQZ	R0,	incr_3

NOP
incr_4
	SLT		R21, R14, R15
	BEQZ	R21, incr_5
	ADDU	R14, R4, R14

	BEQZ	R0,	incr_4

NOP
incr_5
	SLT		R21, R15, R16
	BEQZ	R21, incr_6
	ADDU	R15, R5, R15

	BEQZ	R0,	incr_5

NOP
incr_6
	SLT		R21, R16, R17
	BEQZ	R21, incr_7
	ADDU	R16, R6, R16

	BEQZ	R0,	incr_6

NOP
incr_7
	SLT		R21, R17, R18
	BEQZ	R21, incr_8
	ADDU	R17, R7, R17

	BEQZ	R0,	incr_7

NOP
incr_8
	SLT		R21, R18, R19
	BEQZ	R21, incr_9
	ADDU	R18, R8, R18

	BEQZ	R0,	incr_8

NOP
incr_9
	SLT		R21, R19, R20
	BEQZ	R21, incr_10_b
	ADDU	R19, R9, R19

	BEQZ	R0,	incr_9

NOP
; ------------------------------------ backwards
incr_10_b
	SLT		R21, R20, R19
	BEQZ	R21, incr_9_b
	ADDU	R20, R10, R20

	BEQZ	R0,	incr_10_b

NOP
incr_9_b
	SLT		R21, R19, R18
	BEQZ	R21, incr_8_b
	ADDU	R19, R9, R19

	BEQZ	R0,	incr_9_b

NOP
incr_8_b
	SLT		R21, R18, R17
	BEQZ	R21, incr_7_b
	ADDU	R18, R8, R18

	BEQZ	R0,	incr_8_b

NOP
incr_7_b
	SLT		R21, R17, R16
	BEQZ	R21, incr_6_b
	ADDU	R17, R7, R17

	BEQZ	R0,	incr_7_b

NOP
incr_6_b
	SLT		R21, R16, R15
	BEQZ	R21, incr_5_b
	ADDU	R16, R6, R16

	BEQZ	R0,	incr_6_b

NOP
incr_5_b
	SLT		R21, R15, R14
	BEQZ	R21, incr_4_b
	ADDU	R15, R5, R15

	BEQZ	R0,	incr_5_b

NOP
incr_4_b
	SLT		R21, R14, R13
	BEQZ	R21, incr_3_b
	ADDU	R14, R4, R14

	BEQZ	R0,	incr_4_b

NOP
incr_3_b
	SLT		R21, R13, R12
	BEQZ	R21, incr_2_b
	ADDU	R13, R3, R13
	BEQZ	R0,	incr_3_b

NOP
incr_2_b
	SLT		R21, R12, R11
	BEQZ	R21, is_done
	ADDU	R12, R2, R12
	BEQZ	R0,	incr_2_b

is_done
NOP
NOP
	SNE		R21, R11, R12
	BNEZ	R21, main
	SNE		R21, R12, R13
	BNEZ	R21, main
	SNE		R21, R13, R14
	BNEZ	R21, main
	SNE		R21, R14, R15
	BNEZ	R21, main
	SNE		R21, R15, R16
	BNEZ	R21, main
	SNE		R21, R16, R17
	BNEZ	R21, main
	SNE		R21, R17, R18
	BNEZ	R21, main
	SNE		R21, R18, R19
	BNEZ	R21, main
	SNE		R21, R19, R20
	BNEZ	R21, main	
	NOP
	NOP
print_result
	LW		R12, s2(R0)  ; find how many values s2 has
	ADDUI	R13, R0, 1  ; R13 will be the loop counter for printer

print_result_loop
	LW		R15, s2(R13)  ; load the next char into R15
	SGEU	R14, R13, R12  ; Set if R13 > R12
	PCH		R15  ; print R12 to the screen
	ADDUI	R13, R13, 1  ; R13 will be the loop counter for printer
	BEQZ	R14, print_result_loop  ; jump back to print_intro if R14==0

	PDU		R11  ; print the final result to the screen
	PCH		R28 ; carrage return
	PCH		R29 ; new line

	TSP

done
	BEQZ	R0,	done